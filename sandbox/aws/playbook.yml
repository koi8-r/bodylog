---
- name: Init AWS docker swarm cloud
  hosts: 127.0.0.1
  connection: local
  gather_facts: false
  tags: []
  vars:
    project_name: docker
    env: staging
    app_name: "{{project_name}}-{{env}}"
    ssh_key_name: "{{app_name}}-key"
    ssh_key_path: "{{playbook_dir}}/{{ssh_key_name}}.pem"
    aws_access_key_id:     "{{ lookup('ini', 'aws_access_key_id section=default file=~/.aws/credentials') }}"
    aws_secret_access_key: "{{ lookup('ini', 'aws_secret_access_key section=default file=~/.aws/credentials') }}"
    aws_instance_type: t2.micro
    aws_region: us-east-2
    aws_ami: ami-2eac874b
    aws_amazon_ami: ami-f63b1193
    network: '192.168.0.0/20'  # zero subnet is reserved, 15 subnet is max
    ip: '192.168.15.1'
    default_tags: &default_tags
      Env: "{{env}}"
      Project: "{{project_name}}"
      App: "{{app_name}}"
    group_name: launched
    noaws: false


  tasks:

    # VPC:VPC
    - name: Create VPC
      ec2_vpc_net:
        name: &vpc_name "{{app_name}}-vpc"
        region: "{{aws_region}}"
        cidr_block: "{{network}}"
        dns_hostnames: true
        dns_support: true
        tenancy: default
        tags:
          <<: *default_tags
          Name: *vpc_name
      register: vpc  # vpc.vpc.id
      tags: []
      when: not noaws

    # VPC:DHCP
    - name: Create DHCP options
      ec2_vpc_dhcp_option:
        vpc_id: "{{vpc.vpc.id}}"
        region: "{{aws_region}}"
        domain_name: oz.net.internal
        dns_servers:
          - 'AmazonProvidedDNS'
          - '8.8.8.8'
        delete_old: true
        inherit_existing: false
        tags:
          <<: *default_tags
          Name: "{{app_name}}-dhcp"
      register: dhcp  # dhcp.dhcp_options_id
      tags: []
      when: not noaws

    # VPC:IGW
    - name: Create internet gateway
      ec2_vpc_igw:
        vpc_id: "{{vpc.vpc.id}}"
        region: "{{aws_region}}"
        tags:
          <<: *default_tags
          Name: "{{app_name}}-igw"
      register: igw  # igw.gateway_id
      tags: []
      when: not noaws

    # VPC:Subnet
    - name: Create subnet
      ec2_vpc_subnet:
        vpc_id: "{{vpc.vpc.id}}"
        region: "{{aws_region}}"
        # az:
        # map_public:
        cidr: "{{network}}"
        tags:
          <<: *default_tags
          Name: "{{app_name}}-subnet"
      register: subnet
      tags: []
      when: not noaws

    # VPC:Route
    - name: Create subnet route table
      ec2_vpc_route_table:
        vpc_id: "{{vpc.vpc.id}}"
        region: "{{aws_region}}"
        subnets:
          - "{{subnet.subnet.id}}"
        routes:
          - dest: 0.0.0.0/0
            gateway_id: "{{igw.gateway_id}}"
        lookup: tag
        purge_routes: true
        purge_subnets: true
        tags:
          <<: *default_tags
          Name: "{{app_name}}-route"
      register: route
      tags: []
      when: not noaws

    # VPC:Firewall
    - name: Create firewall
      ec2_group:
        name: &fw_name "{{app_name}}-fw"
        description: *fw_name
        vpc_id: "{{vpc.vpc.id}}"
        region: "{{aws_region}}"
        rules:
          - proto: icmp
            from_port: 8 # type
            to_port:  -1 # subtype
            cidr_ip: '0.0.0.0/0'
          - proto: tcp
            ports:
              - 22
              - 2222
            cidr_ip: '0.0.0.0/0'
          - proto: tcp
            ports:
              - 80
              - 443
              - 8080-8089
            cidr_ip:
              - '0.0.0.0/0'
        rules_egress:
          - proto: all
            cidr_ip: '0.0.0.0/0'
        purge_rules: true
        purge_rules_egress: true
        purge_tags: true
        tags:
          <<: *default_tags
          Name: *vpc_name
      register: fw  # fw.group_id
      tags: []
      when: not noaws


    # EC2:SSH
    - name: Create SSH key
      ec2_key:
        name: "{{ssh_key_name}}"
        region: "{{aws_region}}"
        force: true
        wait: true
      register: ssh_key
      tags: []
      when: not noaws

    - name: Save SSH key
      # todo: save key path in host var
      copy:
        content: "{{ssh_key.key.private_key}}"
        dest: "{{ssh_key_path}}"
        mode: !!str 0400
      tags: []
      when: not noaws and ssh_key.changed

    - ec2_eni_facts:
        region: "{{aws_region}}"
        filters:
          private-ip-address: "{{ip}}"
          vpc-id: "{{vpc.vpc.id}}"
          subnet-id: "{{subnet.subnet.id}}"
      register: nic_facts
      when: not noaws
    - debug:
        var: nic_facts
      when: not true

    # EC2:NIC
    - name: Create NIC
      ec2_eni:
        description: &nic_name "{{app_name}}-nic"
        region: "{{aws_region}}"
        device_index: 0
        private_ip_address: "{{ip}}"
        subnet_id: "{{subnet.subnet.id}}"
        security_groups:
          - "{{fw.group_id}}"
        delete_on_termination: true
      register: nic  # nic.interface.id
      tags: []
      when: not noaws  # not nic_facts.network_interfaces
      # bug: changed every time
      changed_when: nic.interface.private_ip_address != ip or
                    nic.interface.subnet_id != subnet.subnet.id or
                    nic.interface.vpc_id != vpc.vpc.id
    - ec2_tag:
        region: "{{aws_region}}"
        resource: "{{nic.interface.id}}"
        tags:
          <<: *default_tags
          Name: *nic_name

    # EC2:EIP
    - name: Create EIP
      ec2_eip:
        region: "{{aws_region}}"
        device_id: "{{nic.interface.id}}"
        in_vpc: true  # non classic
        # private_ip_address
        release_on_disassociation: true
        reuse_existing_ip_allowed: true
      register: eip
      tags: []
      when: not noaws

    - ec2_tag:
        region: "{{aws_region}}"
        resource: "{{eip.allocation_id}}"
        tags:
          <<: *default_tags
          Name: "{{app_name}}-eip"

    - set_fact:
        public_ip: "{{eip.public_ip}}"
    - debug:
        var: public_ip

    # EC2:EC2
    - name: Create instance
      ec2:
        key_name: "{{ssh_key_name}}"
        region: "{{aws_region}}"
        instance_type: "{{aws_instance_type}}"
        image: "{{aws_ami}}"
        network_interfaces:
          - "{{nic.interface.id}}"
        user_data: |
          #!/bin/sh
          # docker exec -ti shell-aws apk -U add python3
          # start-stop-daemon --start --background --user nobody -g nogroup --exec nc -- -l -p 2222 0.0.0.0 -e /bin/hostname
          # MY_PRIVATE_IP=$(wget -qO- http://169.254.169.254/latest/meta-data/local-ipv4)
        volumes:
          - device_name: /dev/xvdb
            device_type: standard  # volume_type: standard
            volume_size: 20
            delete_on_termination: true
        instance_tags:
          <<: *default_tags
          Name: "{{app_name}}-ec2"
        count_tag: Env
        exact_count: 1
        wait: true
      register: ec2  # ec2.tagged_instances, .instances empty on reuse
      tags: []
      when: not noaws

    - name: Wait for SSH
      wait_for:
        host: "{{item.public_ip}}"
        port: 22
        state: started
        delay: 5
        timeout: 300
      with_items: "{{ec2.tagged_instances}}"
      tags: []
      when: not noaws and (ec2 | changed)

    - ec2_instance_facts:
        region: "{{aws_region}}"
        filters:
          'tag:App': "{{app_name}}"
      register: ec2_facts
      tags: []
      when: noaws

    - name: Add new instance to the host group
      add_host:
        hostname: "{{item.public_ip_address|default(item.public_ip)}}"
        groupname: "{{group_name}}"  # groups
        # todo:
        # ansible_ssh_private_key_file: "{{ssh_key_path}}"
        # myvar: 1
      tags: []
      when: not noaws or item.public_ip_address is defined
      with_items: "{{ec2.tagged_instances if not noaws else ec2_facts.instances}}"
      changed_when: not true

    - name: Collected instances
      debug:
        msg: "Collected instances: {{groups[group_name] | join(', ')}}"

  # todo: ec2_tag untagged resources | http://docs.ansible.com/ansible/latest/ec2_tag_module.html


- name: Bootstrap docker swarm on instance
  hosts:
    - launched
  connection: ssh
  remote_user: docker
  gather_facts: false
  tags: []
  vars:
    project_name: docker
    env: staging
    app_name: "{{project_name}}-{{env}}"
    ssh_key_name: "{{app_name}}-key"
    ssh_key_path: "{{playbook_dir}}/{{ssh_key_name}}.pem"
    ansible_ssh_private_key_file: "{{ssh_key_path}}"
    ansible_ssh_extra_args: -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null
    ansible_python_interpreter: /usr/bin/python3

  tasks:

    - name: Install Py3
      become: true
      become_method: sudo
      become_user: root
      raw: >
        apk -U add python3

    - name: Init swarm
      shell: >
        docker swarm init --advertise-addr=eth0 --listen-addr=eth0

    - name: Show swarm join token
      shell: >
        docker swarm join-token -q worker
      register: stdout
    - debug:
        msg: "Swarm worker join token: {{stdout.stdout_lines | join('')}}"
