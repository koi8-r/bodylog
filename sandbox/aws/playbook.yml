---
- name: Init AWS docker cloud
  hosts: 127.0.0.1
  connection: local
  gather_facts: false
  tags: [aws]
  vars:
    project_name: docker
    env: staging
    app_name: "{{project_name}}-{{env}}"
    ssh_key_path: "./{{app_name}}-key.pem"
    aws_access_key_id:     "{{ lookup('ini', 'aws_access_key_id section=default file=~/.aws/credentials') }}"
    aws_secret_access_key: "{{ lookup('ini', 'aws_secret_access_key section=default file=~/.aws/credentials') }}"
    aws_instance_type: t2.micro
    aws_region: us-east-2
    aws_ami: ami-2eac874b
    aws_amazon_ami: ami-f63b1193
    default_tags: &default_tags
      Env: "{{env}}"
      Project: "{{project_name}}"
      App: "{{app_name}}"
      # Date: "{{ansible_date_time.iso8601_micro}}" or pipe


  tasks:
    - name: Show AWS key
      debug:
        msg: "{{aws_access_key_id}}:{{aws_secret_access_key}}"
      tags: [aws_key]

    - ec2_vpc_net_facts:
        region: "{{aws_region}}"
      register: vpc_facts
      when: false
    - debug:
        var: vpc_facts
      when: false

    # VPC:VPC
    - name: Create VPC
      ec2_vpc_net:
        name: &vpc_name "{{app_name}}-vpc"
        region: "{{aws_region}}"
        cidr_block: '192.168.100.0/24'
        dns_hostnames: true
        dns_support: true
        tenancy: default
        tags:
          <<: *default_tags
          Name: *vpc_name
      register: vpc  # vpc.vpc.id
      tags: [net, vpc]

    # VPC:DHCP
    - name: Create DHCP options
      ec2_vpc_dhcp_option:
        vpc_id: "{{vpc.vpc.id}}"
        region: "{{aws_region}}"
        domain_name: oz.net.internal
        delete_old: true
        inherit_existing: false
        tags:
          <<: *default_tags
          Name: "{{app_name}}-dhcp"
      register: dhcp  # dhcp.dhcp_options_id
      tags: [net, dhcp]

    # VPC:IGW
    - name: Create internet gateway
      ec2_vpc_igw:
        vpc_id: "{{vpc.vpc.id}}"
        region: "{{aws_region}}"
        tags:
          <<: *default_tags
          Name: "{{app_name}}-igw"
      register: igw  # igw.gateway_id
      tags: [net, igw]

    # VPC:Subnet
    - name: Create subnet
      ec2_vpc_subnet:
        vpc_id: "{{vpc.vpc.id}}"
        region: "{{aws_region}}"
        # az:
        # map_public:
        cidr: '192.168.100.0/24'
        tags:
          <<: *default_tags
          Name: "{{app_name}}-subnet"
      register: subnet
      tags: [net, subnet]

    # VPC:Route
    - name: Create subnet route table
      ec2_vpc_route_table:
        vpc_id: "{{vpc.vpc.id}}"
        region: "{{aws_region}}"
        subnets:
          - "{{ subnet.subnet.id }}"
        routes:
          - dest: 0.0.0.0/0
            gateway_id: "{{ igw.gateway_id }}"
        lookup: tag
        purge_routes: true
        purge_subnets: true
        tags:
          <<: *default_tags
          Name: "{{app_name}}-route"
      register: route
      tags: [net, route]

    # VPC:Firewall
    - name: Create firewall
      ec2_group:
        name: &fw_name "{{app_name}}-fw"
        description: *fw_name
        vpc_id: "{{vpc.vpc.id}}"
        region: "{{aws_region}}"
        rules:
          - proto: icmp
            from_port: 8 # type
            to_port:  -1 # subtype
            cidr_ip: '0.0.0.0/0'
          - proto: tcp
            ports: 22
            cidr_ip: '0.0.0.0/0'
          - proto: tcp
            ports:
              - 80
              - 443
              - 8080-8089
            cidr_ip:
              - '0.0.0.0/0'
        rules_egress:
          - proto: all
            cidr_ip: '0.0.0.0/0'
        purge_rules: true
        purge_rules_egress: true
        purge_tags: true
        tags:
          <<: *default_tags
          Name: *vpc_name
      register: fw  # fw.group_id
      tags: [net, fw]


    # EC2:SSH
    - name: Create SSH key
      ec2_key:
        name: "{{app_name}}-key"
        region: "{{aws_region}}"
        force: true
        wait: true
      register: ssh_key
      tags: [ssh]

    - name: Save SSH key
      copy:
        content: "{{ssh_key.key.private_key}}"
        dest: "{{ssh_key_path}}"
        mode: !!str 0400
      when: ssh_key.changed
      tags: [ssh]

    # EC2:NIC
    - name: Create NIC
      ec2_eni:
        description: "{{app_name}}-nic"
        region: "{{aws_region}}"
        device_index: 0
        private_ip_address: '192.168.100.100'
        subnet_id: "{{ subnet.subnet.id }}"
        security_groups:
          - "{{fw.group_id}}"
        delete_on_termination: true
      register: nic  # nic.interface.id
      tags: [nic]

    # EC2:EIP
    - name: Create EIP
      ec2_eip:
        region: "{{aws_region}}"
        device_id: "{{nic.interface.id}}"
        in_vpc: true  # non classic
        # private_ip_address
        release_on_disassociation: true
        reuse_existing_ip_allowed: true
      register: eip
      tags: [eip]

    # EC2:EC2
    - name: Create instance
      ec2:
        key_name: "{{app_name}}-key"
        region: "{{aws_region}}"
        instance_type: "{{aws_instance_type}}"
        image: "{{aws_ami}}"
        network_interfaces:
          - "{{nic.interface.id}}"
        # user_data
        instance_tags:
          <<: *default_tags
          Name: "{{app_name}}-ec2"
        count_tag: env
        exact_count: 1
        wait: true
      register: ec2

    - debug:
        var: ec2

    # ec2 | changed -> install python3

    - name: Add new instance to the host group
      add_host:
        hostname: "{{ item.public_ip }}"
        groupname: launched  # groups
      with_items: "{{ ec2.instances }}"  # .tagged_instances

    # wait_for ssh tcp 22 port ready


- name: Run this on each host
  # ansible-playbook sandbox/aws/playbook.yml -t docker -i '18.218.98.217,' -e ansible_ssh_private_key_file=./sandbox/aws/docker-staging-key.pem
  remote_user: docker
  hosts:
    - launched
    # - '18.218.98.217'
  connection: ssh
  gather_facts: false
  tags: [docker]
  vars:
    ssh_key_path: "./{{app_name}}-key.pem"
    ansible_ssh_private_key_file: "{{ssh_key_path}}"
  tasks:
    - name: Uname
      raw: uname -a
      register: stdout
    - debug:
        msg: "{{stdout.stdout_lines | join('')}}"
