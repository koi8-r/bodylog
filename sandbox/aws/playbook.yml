---
- name: Init AWS docker cloud
  hosts: 127.0.0.1
  connection: local
  gather_facts: false
  tags: [aws]
  vars:
    project_name: docker
    env: staging
    app_name: "{{project_name}}-{{env}}"
    ssh_key_path: "./{{app_name}}-key.pem"
    aws_access_key_id:     "{{ lookup('ini', 'aws_access_key_id section=default file=~/.aws/credentials') }}"
    aws_secret_access_key: "{{ lookup('ini', 'aws_secret_access_key section=default file=~/.aws/credentials') }}"
    aws_instance_type: t2.micro
    aws_region: us-east-2
    aws_ami: ami-2eac874b
    aws_amazon_ami: ami-f63b1193
    network: '192.168.0.0/20'  # zero subnet is reserved, 15 subnet is max
    ip: '192.168.15.1'
    default_tags: &default_tags
      Env: "{{env}}"
      Project: "{{project_name}}"
      App: "{{app_name}}"


  tasks:

    # VPC:VPC
    - name: Create VPC
      ec2_vpc_net:
        name: &vpc_name "{{app_name}}-vpc"
        region: "{{aws_region}}"
        cidr_block: "{{network}}"
        dns_hostnames: true
        dns_support: true
        tenancy: default
        tags:
          <<: *default_tags
          Name: *vpc_name
      register: vpc  # vpc.vpc.id
      tags: [vpc]

    # VPC:DHCP
    - name: Create DHCP options
      ec2_vpc_dhcp_option:
        vpc_id: "{{vpc.vpc.id}}"
        region: "{{aws_region}}"
        domain_name: oz.net.internal
        delete_old: true
        inherit_existing: false
        tags:
          <<: *default_tags
          Name: "{{app_name}}-dhcp"
      register: dhcp  # dhcp.dhcp_options_id
      tags: [dhcp]

    # VPC:IGW
    - name: Create internet gateway
      ec2_vpc_igw:
        vpc_id: "{{vpc.vpc.id}}"
        region: "{{aws_region}}"
        tags:
          <<: *default_tags
          Name: "{{app_name}}-igw"
      register: igw  # igw.gateway_id
      tags: [igw]

    # VPC:Subnet
    - name: Create subnet
      ec2_vpc_subnet:
        vpc_id: "{{vpc.vpc.id}}"
        region: "{{aws_region}}"
        # az:
        # map_public:
        cidr: "{{network}}"
        tags:
          <<: *default_tags
          Name: "{{app_name}}-subnet"
      register: subnet
      tags: [subnet]

    # VPC:Route
    - name: Create subnet route table
      ec2_vpc_route_table:
        vpc_id: "{{vpc.vpc.id}}"
        region: "{{aws_region}}"
        subnets:
          - "{{subnet.subnet.id}}"
        routes:
          - dest: 0.0.0.0/0
            gateway_id: "{{igw.gateway_id}}"
        lookup: tag
        purge_routes: true
        purge_subnets: true
        tags:
          <<: *default_tags
          Name: "{{app_name}}-route"
      register: route
      tags: [route]

    # VPC:Firewall
    - name: Create firewall
      ec2_group:
        name: &fw_name "{{app_name}}-fw"
        description: *fw_name
        vpc_id: "{{vpc.vpc.id}}"
        region: "{{aws_region}}"
        rules:
          - proto: icmp
            from_port: 8 # type
            to_port:  -1 # subtype
            cidr_ip: '0.0.0.0/0'
          - proto: tcp
            ports:
              - 22
              - 2222
            cidr_ip: '0.0.0.0/0'
          - proto: tcp
            ports:
              - 80
              - 443
              - 8080-8089
            cidr_ip:
              - '0.0.0.0/0'
        rules_egress:
          - proto: all
            cidr_ip: '0.0.0.0/0'
        purge_rules: true
        purge_rules_egress: true
        purge_tags: true
        tags:
          <<: *default_tags
          Name: *vpc_name
      register: fw  # fw.group_id
      tags: [fw]


    # EC2:SSH
    - name: Create SSH key
      ec2_key:
        name: "{{app_name}}-key"
        region: "{{aws_region}}"
        force: true
        wait: true
      register: ssh_key
      tags: [ssh]

    - name: Save SSH key
      copy:
        content: "{{ssh_key.key.private_key}}"
        dest: "{{ssh_key_path}}"
        mode: !!str 0400
      when: ssh_key.changed
      tags: [ssh]

    - ec2_eni_facts:
        region: "{{aws_region}}"
        filters:
          private-ip-address: "{{ip}}"
          vpc-id: "{{vpc.vpc.id}}"
          subnet-id: "{{subnet.subnet.id}}"
      register: nic_facts
    - debug:
        var: nic_facts
      when: not true

    # EC2:NIC
    - name: Create NIC
      ec2_eni:
        description: "{{app_name}}-nic"
        region: "{{aws_region}}"
        device_index: 0
        private_ip_address: "{{ip}}"
        secondary_private_ip_address_count: 0
        subnet_id: "{{subnet.subnet.id}}"
        security_groups:
          - "{{fw.group_id}}"
        delete_on_termination: true
      register: nic  # nic.interface.id
      tags: [nic]
      when: true or not nic_facts.network_interfaces  # bug, stub: changed every time
      changed_when: nic.interface.private_ip_address != ip or
                    nic.interface.subnet_id != subnet.subnet.id or
                    nic.interface.vpc_id != vpc.vpc.id

    # EC2:EIP
    - name: Create EIP
      ec2_eip:
        region: "{{aws_region}}"
        device_id: "{{nic.interface.id}}"
        in_vpc: true  # non classic
        # private_ip_address
        release_on_disassociation: true
        reuse_existing_ip_allowed: true
      register: eip
      tags: [eip]

    # EC2:EC2
    - name: Create instance
      ec2:
        key_name: "{{app_name}}-key"
        region: "{{aws_region}}"
        instance_type: "{{aws_instance_type}}"
        image: "{{aws_ami}}"
        network_interfaces:
          - "{{nic.interface.id}}"
        # ec2 | changed: apk install python3
        user_data: |
          #!/bin/bash
          echo "Port 2222" >> /etc/ssh/sshd_config
          /usr/sbin/sshd -D -f /etc/ssh/sshd_config
          # apk -U add python3
        instance_tags:
          <<: *default_tags
          Name: "{{app_name}}-ec2"
        count_tag: Env
        exact_count: 1
        wait: true
      register: ec2  # ec2.tagged_instances, .instances empty on reuse

    - name: Add new instance to the host group
      add_host:
        hostname: "{{item.public_ip}}"
        groupname: launched  # groups
      with_items: "{{ec2.tagged_instances}}"  # .tagged_instances
      changed_when: not true

    - name: Wait for SSH
      wait_for:
        host: "{{item.public_ip}}"
        port: 22
        state: started
        delay: 5
        timeout: 300
      with_items: "{{ec2.tagged_instances}}"
      when: ec2 | changed


# Alt.: load facts for instances with tag filter and execute deploy commands
- name: Container bootstrap
  remote_user: docker
  hosts:
    - launched
  connection: ssh
  gather_facts: false
  tags: [docker]
  vars:
    ansible_ssh_private_key_file: "./sandbox/aws/docker-staging-key.pem"
  tasks:
    - name: Uname
      raw: uname -a
      register: stdout
    - debug:
        msg: "{{stdout.stdout_lines | join('')}}"
    - name: Install Py3
      become: true
      become_method: sudo
      become_user: root
      raw: apk -U add python3
